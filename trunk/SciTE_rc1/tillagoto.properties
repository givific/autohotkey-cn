; TillaGoto settings
;
; Do NOT edit this file!
;

;Appearance

bTrayIcon           := True     ;Set to True to show the tray icon, False to keep it hidden.
iGUIWidth           := 230      ;Specify the width of the GUI. If bWideView is True, iGUIWidth represents the
								;minimum width of the GUI, no matter how short the items are.
iGUIHeight          := 12       ;Specify, in number of rows, the height of the listbox.
iMargin             := 2        ;Specify the width of the GUI's margins.
iTransparency       := 255      ;Specify the transparency of the GUI. Preferably divisible by 15. Put 255 for no
								;transparency at all (consumes less resources). Put 0 to disable fade-in effect.
bPosLeft            := False    ;Set to True to position the GUI on the left side instead of the right side.
bWideView           := True     ;Set to True to auto-resize the width of the GUI so that all the items are visible
								;without the horizontal scrollbar.
iAlignFilenames     := 1        ;This setting is used only if iIncludeMode has the option 0x10000000. It
								;determines how the filenames are appended to functions/labels/hotkeys
								; - Set to 0 to append the filenames without any alignment (minimal GUI width)
								; - Set to 1 to right-align the filenames (also minimal GUI width)
								; - Set to 2 to left-align the filenames (GUI width might be larger)
cGUIBG              := ""       ;Specify the GUI's background colour. Leave blank for default.
cControlBG          := ""       ;Specify the controls' background colour. Leave blank for default.
cControlFG          := ""       ;Specify the controls' foreground (text) colour. Leave blank for default.
iControlFontSize    := 8        ;Specify the size of the font for the textbox and listbox.
fControlFont        := "Courier New" ;Name of the font for the textbox and listbox. Must be monospace for proper
								;alignment. A better font than Courier New would be Consolas.

;Hotkeys

uSummonGUI          := "F12"    ;Specify the hotkey you want to use to call up the GUI
uGoBack             := "!Left"  ;Specify the keyboard hotkey for going to the previous view
uGoForward          := "!Right" ;Specify the keyboard hotkey for going to the next view
uGotoDef            := "+Enter" ;Specify the hotkey you want to use to go to a function/label on whose name the
								;caret is located. Similar to the middleclicking feature.

;Behaviour

bFilterComments     := True     ;Set to True to filter out the functions/labels/hotkeys found in comment blocks.
								;Note: this feature slightly affects performance if many comment blocks are
								;present. Therefore, if you start experiencing lag, you might want to turn it off
								;(at the expense of not filtering out functions/labels/hotkeys found in comments).
								;To exclude a comment block from filtering, start it with "/*!". This is an easy
								;way to speed up processing (but any functions/labels/hotkeys will be picked up).
bQuickMode          := False    ;Set to True to make TillaGoto go straight to showing the GUI and exit on close.
								;In this mode, TillaGoto cannot keep track of line history or use hotkeys.
bQuitWithEditor     := True     ;Set to True to make TillaGoto terminate when the editor is also terminated. If
								;set to True, please also see sMustExist.
bMatchEverywhere    := True     ;Set to False for matching to occur only at the beginning of the label/function
								;name. Set to True for matching to occur anywhere in the label/function name. As
								;well, multiple words can be specified. For example, typing "Dog Cat" will match
								;any label/function containing those words anywhere in their name. This is useful
								;to search for functions (or labels) only by typing "() FunctionName".

;Mouse configuration

bUseMButton         := True     ;Set to True to enable the middle mouse button as a hotkey to call up the GUI.
								;More importantly, this also allows you to go to a function/label simply by
								;pressing the middle mouse button on the function/label name.
								;Set to False to disable it.
iCancelWait         := 300      ;Specify in milliseconds the amount of time the middle mouse button should be
								;depressed while the GUI is showing for the GUI to close without selection.
								;If the middle mouse button is pressed for any amount shorter than that, the
								;selection is validated.

;Include files scanning feature

iIncludeMode        := 0x10111101   ;This setting affects the behaviour of TillaGoto when scanning for script
									;labels, functions and hotkeys in #Include files and library files. To turn
									;off the feature completely, specify 0. Otherwise, iIncludeMode can be any
									;combination of the following values:
									;0x00000001 - Scan #Include files (working directory assumed as A_ScriptDir)
									;0x00000010 - Scan library directories files
									;0x00000100 - Retrieve functions upon scanning
									;0x00001000 - Retrieve labels upon scanning
									;0x00010000 - Retrieve hotkeys upon scanning
									;0x00100000 - Filter comment blocks before scanning (like bFilterComments)
									;0x01000000 - Recurse (ie. include #Include files of #Include files and so on)
									;0x10000000 - Append the name of the file to the functions/labels/hotkeys name
bCacheFiles         := True         ;Set to True to enable file caching so that scanning is only done once on
									;files that have already been scanned in the past. This does not affect the
									;current script (which is always re-scanned). Caching is highly recommended as
									;it greatly enhances performance of the include files scanning feature.

;TillaGoto directives

bDirectives         := True
/*! Set to True to scan the script for TillaGoto directives. Directives allow you to change TillaGoto's behaviour
for the script you are working on. You put them in your script (anywhere) as a line comment. The syntax is
(without the quotes): ";TillaGoto.<setting> = <value>". These settings override the default settings you put here.

Supported settings are bFilterComments, iIncludeMode, and ScanFile.
- bFilterComments allows you to force comment filtering on/off for the script you put it in. For example, to turn
off comment filtering, add the line (without the quotes): ";TillaGoto.bFilterComments = 0" to your script. This
is the only directive that also works when detected inside #Include files and library files that are scanned.
- iIncludeMode allows you to change TillaGoto's default iIncludeMode settings for the script you put it in. For
example, to force TillaGoto to only scan for functions in #Include files (with no other options), use:
";TillaGoto.iIncludeMode = 0x00000100". Or to simply turn it off, use: ";TillaGoto.iIncludeMode = 0"
- ScanFile allows you to force TillaGoto to always scan a file, as if it was an Include file, even though it isn't
used with the #Include directive. The directive is processed in exactly the same way as an #Include file would be.
For example, the directive ";TillaGoto.ScanFile = %A_ScriptDir%\script.ahk" will have the same effect as if
TillaGoto saw the directive "#Include %A_ScriptDir%\script.ahk". Directories to change the working directory
are also supported. The variable iIncludeMode must contain the 0x00000001 option in order to work.
If the file is in one of the library directories, simply put its name in brackets: ;TillaGoto.ScanFile=<lib>
This is useful when your script uses library functions, but you still want TillaGoto to be aware of them.

  Note that the ScanFile directives are queued up and processed right after the script's actual #Include files are
scanned. Therefore, it doesn't matter where they are placed relative to the actual #Include directives, but the
order in which they are written does (in order to be able to change the working directory of subsequent ones).
The working directory is set back to %A_ScriptDir% before processing them.
  The ScanFile feature is useful when working inside a project with many satellite files. A simple ScanFile
directive to the main script in each satellite file will allow access to all the functions no matter on which
file you're working on.
*/
